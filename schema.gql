# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Benchmark {
  id: ID!
  name: String
  benchmark: Float
  industry_id: ID
  kpilib_id: ID
  industry: Industry
  kpilib: KpiLib
}

type Capability {
  id: ID!
  name: String!
  default: Boolean
  capitalCosts: Float
  fte: Float
  salaryCosts: Float
  tags: String
  filters: String
  kpis: [String!]
  hierarchy_id: String
  user_id: ID
  industry_id: ID
  company_id: ID
  parentId: ID
  last_update: Date
  user: User
  industry: Industry
  company: Company
  children: [Capability!]
  parent: Capability
  classifications: [Classification!]
}

input CapabilityCreationInput {
  name: String!
  industry_id: ID
  company_id: ID
  capitalCosts: Float
  fte: Float
  salaryCosts: Float
  parentId: ID
  hierarchy_id: String
}

input CapabilityInput {
  id: ID!
  name: String
  capitalCosts: Float
  fte: Float
  salaryCosts: Float
  hierarchy_id: String
  industry_id: ID
  company_id: ID
  parentId: ID
}

type Challenge {
  id: ID!
  name: String!
  userId: ID
  companyId: ID
  user: User!
  company: Company!
}

input ChallengeCreationInput {
  name: String!
  companyId: ID!
}

input ChallengeInput {
  id: ID!
  name: String
  companyId: ID
}

type Classification {
  id: ID!
  name: String!
  lense_id: ID
}

type Company {
  id: ID!
  name: String!
  cid: String
  user_id: ID
  industry_id: ID
  user: User!
  industry: Industry!
  capabilities: [Capability!]
  processes: [Process!]
  challenges: [Challenge!]
  grouptags: [GroupTag!]
  groupfilters: [GroupFilter!]
}

input CompanyCreationInput {
  name: String!
  industry_id: ID!
  cid: String
}

input CompanyInput {
  id: ID!
  name: String
  industry_id: ID
  cid: String
}

"""Date custom scalar type"""
scalar Date

type GroupFilter {
  id: ID!
  name: String!
  filters: [String!]
  companyId: ID!
  parentId: ID
  company: Company
}

input GroupFilterCreationInput {
  name: String!
  companyId: ID!
  parentId: ID!
  filters: [String!]
}

input GroupFilterInput {
  id: ID!
  name: String
  filters: [String!]
  companyId: ID
  parentId: ID!
}

type GroupTag {
  id: ID!
  name: String!
  tags: [String!]
  companyId: ID!
  company: Company
}

input GroupTagCreationInput {
  name: String!
  companyId: ID!
  tags: [String!]
}

input GroupTagInput {
  id: ID!
  name: String
  tags: [String!]
  companyId: ID
}

type Industry {
  id: ID!
  name: String!
  countProcesses: Int
  countCapabilities: Int
  countCompanies: Int
  processes: [Process!]
  capabilities: [Capability!]
  companies: [Company!]
  startups: [Startup!]
  benchmarks: [Benchmark!]
}

input IndustryCreationInput {
  id: Float
  name: String!
}

input IndustryInput {
  id: ID!
  name: String!
}

type KpiLib {
  id: ID!
  label: String
  description: String
  kpi: String
  tags: [String!]
  source: String
  benefitType: String
  isActive: Boolean
  benchmarks: [Benchmark!]
}

input KpiLibCreationInput {
  label: String
  description: String
  kpi: String
  tags: [String!]
  source: String
  benefitType: String
  is_active: Boolean
}

input KpiLibInput {
  id: ID!
  label: String
  description: String
  kpi: String
  tags: [String!]
  source: String
  benefitType: String
  is_active: Boolean
}

type Lense {
  id: ID!
  name: String!
  classifications: [Classification!]
}

type Mutation {
  createIndustry(data: IndustryCreationInput!): Industry!
  saveIndustry(data: IndustryInput!): Industry!
  saveIndustries(data: [IndustryInput!]!): [Industry!]!
  cloneIndustry(data: IndustryCreationInput!, id: ID!): Industry!
  removeIndustry(id: ID!): Industry!
  createProcess(data: ProcessCreationInput!): Process!
  saveProcess(data: ProcessInput!): Process!
  saveProcesses(data: [ProcessInput!]!): [Process!]!
  removeProcess(id: ID!): Process!
  createCapability(data: CapabilityCreationInput!): Capability!
  saveCapability(data: CapabilityInput!): Capability!
  saveCapabilities(data: [CapabilityInput!]!): [Capability!]!
  removeCapability(id: ID!): Capability!
}

type Process {
  id: ID!
  name: String!
  pcf_id: String
  hierarchy_id: String
  difference_idx: String
  change_details: String
  metrics_avail: Boolean
  user_id: ID
  industry_id: ID
  company_id: ID
  parentId: ID
  last_update: Date
  user: User
  industry: Industry
  company: Company
  children: [Process!]
  parent: Process
}

input ProcessCreationInput {
  name: String!
  industry_id: ID!
  parentId: ID
  pcf_id: String
  hierarchy_id: String
  difference_idx: String
  change_details: String
  metrics_avail: Boolean
}

input ProcessInput {
  id: ID!
  name: String
  industry_id: ID
  pcf_id: String
  hierarchy_id: String
  difference_idx: String
  change_details: String
  metrics_avail: Boolean
  parentId: ID
}

type Query {
  users(page: Int = 1, skip: Int = 0, limit: Int = 25): [User!]!
  user(id: ID!): User!
  industries(page: Int = 1, skip: Int = 0, limit: Int = 25): [Industry!]!
  industry(id: ID!): Industry!
  processes(page: Int = 1, skip: Int = 0, limit: Int = 25, industry_id: ID, parentId: ID): [Process!]!
  treeProcesses(page: Int = 1, skip: Int = 0, limit: Int = 25, industry_id: ID, parentId: ID): Process!
  defaultTreeProcesses(page: Int = 1, skip: Int = 0, limit: Int = 25, industry_id: ID, parentId: ID): Process!
  process(id: ID!): Process!
  capabilities(page: Int = 1, skip: Int = 0, limit: Int = 25, industry_id: ID, company_id: ID, parentId: ID, ids: [ID!]): [Capability!]!
  treeCapabilities(page: Int = 1, skip: Int = 0, limit: Int = 25, industry_id: ID, company_id: ID, parentId: ID, ids: [ID!]): Capability!
  capability(id: ID!): Capability!
}

type Startup {
  cid: ID!
  name: String!
  first_financing_date: Date
  first_financing_size: Float
  last_financing_date: Date
  last_financing_size: Float
  revenue: Float
  year_founded: Int
  primary_industry_group: String
  primary_industry_code: String
  verticals: String
  capabilities: [Capability!]
  description: String
  industry_id: ID
  company_id: ID
  industry: Industry
}

input StartupCreationInput {
  name: String!
}

input StartupInput {
  cid: ID!
  name: String!
}

type User {
  id: Int!
  email: String!
  firstName: String
  lastName: String
}

input UserCreationInput {
  email: String!
  password: String!
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
}

type ValueDriver {
  id: ID!
  name: String!
  kpis: [String!]
  userId: ID
  industryId: ID
  companyId: ID
  parentId: ID
  user: User
  industry: Industry
  company: Company
  children: [ValueDriver!]
  parent: ValueDriver
}

input ValueDriverCreationInput {
  name: String!
  industryId: ID
  companyId: ID
  parentId: ID
}

input ValueDriverInput {
  id: ID!
  name: String
  industryId: ID
  companyId: ID
  parentId: ID
}
